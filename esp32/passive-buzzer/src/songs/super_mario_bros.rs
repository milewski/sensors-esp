use crate::song::*;

pub struct SuperMarioBros {}

impl SuperMarioBros {
    pub fn new() -> Self {
        SuperMarioBros {}
    }
}

impl Song for SuperMarioBros {
    fn tempo(&self) -> f32 {
        144.0
    }

    fn notes(&self) -> &[(Note, i8)] {
        &[
            (E5, 8), (E5, 8), (REST, 8), (E5, 8), (REST, 8), (C5, 8), (E5, 8),
            (G5, 4), (REST, 4), (G4, 8), (REST, 4),
            (C5, -4), (G4, 8), (REST, 4), (E4, -4),
            (A4, 4), (B4, 4), (AS4, 8), (A4, 4),
            (G4, -8), (E5, -8), (G5, -8), (A5, 4), (F5, 8), (G5, 8),
            (REST, 8), (E5, 4), (C5, 8), (D5, 8), (B4, -4),
            (C5, -4), (G4, 8), (REST, 4), (E4, -4),
            (A4, 4), (B4, 4), (AS4, 8), (A4, 4),
            (G4, -8), (E5, -8), (G5, -8), (A5, 4), (F5, 8), (G5, 8),
            (REST, 8), (E5, 4), (C5, 8), (D5, 8), (B4, -4),
            //--------------------------------------------------------------------------------------
            (REST, 4), (G5, 8), (FS5, 8), (F5, 8), (DS5, 4), (E5, 8),//7
            (REST, 8), (GS4, 8), (A4, 8), (C4, 8), (REST, 8), (A4, 8), (C5, 8), (D5, 8),
            (REST, 4), (DS5, 4), (REST, 8), (D5, -4),
            (C5, 2), (REST, 2),
            //--------------------------------------------------------------------------------------
            (REST, 4), (G5, 8), (FS5, 8), (F5, 8), (DS5, 4), (E5, 8),//repeats from 7
            (REST, 8), (GS4, 8), (A4, 8), (C4, 8), (REST, 8), (A4, 8), (C5, 8), (D5, 8),
            (REST, 4), (DS5, 4), (REST, 8), (D5, -4),
            (C5, 2), (REST, 2),
            //--------------------------------------------------------------------------------------
            (C5, 8), (C5, 4), (C5, 8), (REST, 8), (C5, 8), (D5, 4),//11
            (E5, 8), (C5, 4), (A4, 8), (G4, 2),
            //--------------------------------------------------------------------------------------
            (C5, 8), (C5, 4), (C5, 8), (REST, 8), (C5, 8), (D5, 8), (E5, 8),//13
            (REST, 1),
            (C5, 8), (C5, 4), (C5, 8), (REST, 8), (C5, 8), (D5, 4),
            (E5, 8), (C5, 4), (A4, 8), (G4, 2),
            (E5, 8), (E5, 8), (REST, 8), (E5, 8), (REST, 8), (C5, 8), (E5, 4),
            (G5, 4), (REST, 4), (G4, 4), (REST, 4),
            (C5, -4), (G4, 8), (REST, 4), (E4, -4), // 19
            //--------------------------------------------------------------------------------------
            (A4, 4), (B4, 4), (AS4, 8), (A4, 4),
            (G4, -8), (E5, -8), (G5, -8), (A5, 4), (F5, 8), (G5, 8),
            (REST, 8), (E5, 4), (C5, 8), (D5, 8), (B4, -4),
            //--------------------------------------------------------------------------------------
            (C5, -4), (G4, 8), (REST, 4), (E4, -4), // repeats from 19
            (A4, 4), (B4, 4), (AS4, 8), (A4, 4),
            (G4, -8), (E5, -8), (G5, -8), (A5, 4), (F5, 8), (G5, 8),
            (REST, 8), (E5, 4), (C5, 8), (D5, 8), (B4, -4),
            //--------------------------------------------------------------------------------------
            (E5, 8), (C5, 4), (G4, 8), (REST, 4), (GS4, 4),//23
            (A4, 8), (F5, 4), (F5, 8), (A4, 2),
            (D5, -8), (A5, -8), (A5, -8), (A5, -8), (G5, -8), (F5, -8),
            //--------------------------------------------------------------------------------------
            (E5, 8), (C5, 4), (A4, 8), (G4, 2), //26
            (E5, 8), (C5, 4), (G4, 8), (REST, 4), (GS4, 4),
            (A4, 8), (F5, 4), (F5, 8), (A4, 2),
            (B4, 8), (F5, 4), (F5, 8), (F5, -8), (E5, -8), (D5, -8),
            (C5, 8), (E4, 4), (E4, 8), (C4, 2),
            //--------------------------------------------------------------------------------------
            (E5, 8), (C5, 4), (G4, 8), (REST, 4), (GS4, 4),//repeats from 23
            (A4, 8), (F5, 4), (F5, 8), (A4, 2),
            (D5, -8), (A5, -8), (A5, -8), (A5, -8), (G5, -8), (F5, -8),
            //--------------------------------------------------------------------------------------
            (E5, 8), (C5, 4), (A4, 8), (G4, 2), //26
            (E5, 8), (C5, 4), (G4, 8), (REST, 4), (GS4, 4),
            (A4, 8), (F5, 4), (F5, 8), (A4, 2),
            (B4, 8), (F5, 4), (F5, 8), (F5, -8), (E5, -8), (D5, -8),
            (C5, 8), (E4, 4), (E4, 8), (C4, 2),
            (C5, 8), (C5, 4), (C5, 8), (REST, 8), (C5, 8), (D5, 8), (E5, 8),
            (REST, 1),
            //--------------------------------------------------------------------------------------
            (C5, 8), (C5, 4), (C5, 8), (REST, 8), (C5, 8), (D5, 4), //33
            (E5, 8), (C5, 4), (A4, 8), (G4, 2),
            (E5, 8), (E5, 8), (REST, 8), (E5, 8), (REST, 8), (C5, 8), (E5, 4),
            (G5, 4), (REST, 4), (G4, 4), (REST, 4),
            (E5, 8), (C5, 4), (G4, 8), (REST, 4), (GS4, 4),
            (A4, 8), (F5, 4), (F5, 8), (A4, 2),
            (D5, -8), (A5, -8), (A5, -8), (A5, -8), (G5, -8), (F5, -8),
            //--------------------------------------------------------------------------------------
            (E5, 8), (C5, 4), (A4, 8), (G4, 2), //40
            (E5, 8), (C5, 4), (G4, 8), (REST, 4), (GS4, 4),
            (A4, 8), (F5, 4), (F5, 8), (A4, 2),
            (B4, 8), (F5, 4), (F5, 8), (F5, -8), (E5, -8), (D5, -8),
            (C5, 8), (E4, 4), (E4, 8), (C4, 2),
            //--------------------------------------------------------------------------------------
            (C5, -4), (G4, -4), (E4, 4), //45
            (A4, -8), (B4, -8), (A4, -8), (GS4, -8), (AS4, -8), (GS4, -8),
            (G4, 8), (D4, 8), (E4, -2),
        ]
    }
}
